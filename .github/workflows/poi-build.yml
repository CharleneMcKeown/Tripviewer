name: Build poi

on:
  push:
    #branches: [ main ]
    paths:
      - apis/poi/**
      - .github/workflows/poi-build.yml
  pull_request:
    branches: [ main ]
    paths:
      - 'apis/poi/**'
      - '.github/workflows/poi-build.yml'


env:
  staging_url: https://openhackgjp0clq6poi-staging.azurewebsites.net/api/healthcheck/poi
  production_url: https://openhackgjp0clq6poi.azurewebsites.net/api/healthcheck/poi
  webapp_name: openhackgjp0clq6poi
  resource_group: openhackgjp0clq6rg
  ACR_NAME: ${{ secrets.ACR_NAME }} 
  ACR_USER: ${{ secrets.ACR_USER }} 
  IMAGE_NAME: devopsoh/api-poi 
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  build_poi:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.1
    - name: Install dependencies
      run: dotnet restore 'apis/poi/poi.sln'
    - name: Build
      run: dotnet build 'apis/poi/poi.sln' --configuration Release --no-restore
    - name: Test
      run: dotnet test 'apis/poi/tests/UnitTests/UnitTests.csproj' --no-restore --verbosity normal

    - name: Create Issue Action
      if: ${{ failure() }}
      uses: nashmaniac/create-issue-action@v1.1
      with:
        # Title of the issue
        title: Build failed
        # Token of the user that creates the issue
        token: ${{secrets.GITHUB_TOKEN}}
        # Assignees of the issue
        assignees: ${{github.actor}}
        
  push_to_acr:
    name: Build Docker Image and push to ACR
    needs: build_poi
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build and Tag Docker Image
        if: github.ref == 'refs/heads/main'
        run: | 
          docker build . -t $ACR_NAME/$IMAGE_NAME:$IMAGE_TAG
        working-directory: apis/poi/web
      - name: Login to ACR 
        if: github.ref == 'refs/heads/main'
        run:  docker login ${{ secrets.ACR_NAME }} -u ${{ secrets.ACR_USER }} -p ${{ secrets.ACR_PASSWORD }} 
      - name: Push to ACR
        if: github.ref == 'refs/heads/main'
        run: |
          docker push $ACR_NAME/$IMAGE_NAME:$IMAGE_TAG

  publish_web_app_staging:
    needs: [build_poi, push_to_acr]
    runs-on: ubuntu-latest
    steps:
      - name: Azure authentication
        if: github.ref == 'refs/heads/main'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}
      - name: Deploy image to staging slot
        if: github.ref == 'refs/heads/main'
        uses: Azure/webapps-deploy@v2
        with:
          app-name: ${{ env.webapp_name }}
          slot-name: staging
          images: ${{ env.ACR_NAME }}/${{ env.IMAGE_NAME }}:${{github.run_number}}

  validate_staging:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: publish_web_app_staging
    steps:
    - uses: actions/checkout@v2
    - name: Web Validate 
      run: |
        chmod +x run.sh
        ./run.sh $staging_url 

    - uses: nashmaniac/create-issue-action@v1.1
      if: failure()
      with:
        # Title of the issue
        title: Build failed
        # Token of the user that creates the issue
        token: ${{secrets.GITHUB_TOKEN}}
        # Assignees of the issue
        assignees: ${{github.actor}}
  
  swap_slots:
      if: github.ref == 'refs/heads/main'
      runs-on: ubuntu-latest
      needs: validate_staging
      steps:
      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}

      - name: Swap staging to production
        run: |
          az webapp deployment slot swap --name $webapp_name --resource-group $resource_group --slot staging --target-slot production
          - name: Create Issue Action

      - uses: nashmaniac/create-issue-action@v1.1
        if: failure()
        with:
          # Title of the issue
          title: Build failed
          # Token of the user that creates the issue
          token: ${{secrets.GITHUB_TOKEN}}
          # Assignees of the issue
          assignees: ${{github.actor}}

  validate_production:
      if: github.ref == 'refs/heads/main'
      runs-on: ubuntu-latest
      needs: swap_slots
      steps:
      - uses: actions/checkout@v2

      - name: "Set Expected Validation Tag"
        run: sed -i 's/<--tag-->/${{github.run_number}}/g' apis/poi/webvalidate/validate.json

      - name: Build Validation Container
        run: docker build -t poivalidate apis/poi/webvalidate

      - name: Web Validate 
        run: ./run.sh poivalidate $production_url
        
      - uses: nashmaniac/create-issue-action@v1.1
        if: failure()
        with:
          # Title of the issue
          title: Build failed
          # Token of the user that creates the issue
          token: ${{secrets.GITHUB_TOKEN}}
          # Assignees of the issue
          assignees: ${{github.actor}}

  roll_back:
      if: failure()
      runs-on: ubuntu-latest
      needs: validate_production
      steps:
      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}

      - name: Swap production and staging
        run: |
          az webapp deployment slot swap --name $webapp_name --resource-group $resource_group --slot staging --target-slot production 
      - uses: nashmaniac/create-issue-action@v1.1
        if: failure()
        with:
          # Title of the issue
          title: Build failed
          # Token of the user that creates the issue
          token: ${{secrets.GITHUB_TOKEN}}
          # Assignees of the issue
          assignees: ${{github.actor}}
